name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      crate:
        description: 'Crate name to publish (optional)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'release' && github.event.release.draft == false && github.event.release.prerelease == false)
      || github.event_name == 'workflow_dispatch'
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      PUBLISH_CRATE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.crate || '' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.88.0

      - name: Set up just runner
        uses: extractions/setup-just@v2

      - name: Install system dependencies
        run: just ubuntu-essentials

      - name: Ensure crate versions are unpublished
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config \
            libssl-dev zlib1g-dev \
            clang libclang-dev \
            libunwind-dev

      - name: Publish crates to crates.io
        run: |
          set -euxo pipefail
          crates=(
            cardinal-config
            cardinal-errors
            cardinal-base
            cardinal-wasm-plugins
            cardinal-plugins
            cardinal-proxy
            cardinal-rs
            cardinal-cli
          )

          if [[ -n "${PUBLISH_CRATE:-}" ]]; then
            crates=("$PUBLISH_CRATE")
          fi

          for crate in "${crates[@]}"; do
            if publish_output=$(cargo publish --package "$crate" --locked 2>&1); then
              printf '%s\n' "$publish_output"
              # allow the crates.io index to catch up before the next publish
              sleep 20
              continue
            fi

            printf '%s\n' "$publish_output"
            if printf '%s\n' "$publish_output" | grep -q "already exists"; then
              echo "crate $crate already published, skipping"
              continue
            fi

            exit 1
          done
